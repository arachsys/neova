#!/bin/python

import contextlib
import fcntl
import math
import os
import struct
import sys
import termios

def decode(value):
  half, full = 0x42480000, 0x42c80000
  exponent = math.log(2) / (math.log(full) - math.log(half))
  sign, value = 2 * (value < 1 << 31) - 1, float(value & (1 << 31) - 1)
  return f'{100.0 * sign * (value / full) ** exponent:0.1f}'

def encode(value):
  half, full = 0x42480000, 0x42c80000
  exponent = (math.log(full) - math.log(half)) / math.log(2)
  sign, value = (float(value) < 0) << 31, abs(float(value)) / 100.0
  if value <= 100.0:
    return sign + round(full * value ** exponent)
  raise ValueError

def get(device, header, size):
  data, length = bytearray(size), 0
  with memoryview(data) as view:
    while length < size:
      length = length + device.readinto(view[length:])
      try:
        index = data.index(header, 0, length)
      except:
        index = length + 1 - len(header)
      if index > 0:
        view[0 : length - index] = view[index : length]
        length = length - index
  return data

@contextlib.contextmanager
def serial(path, rate = 9600):
  handle = os.open(path, os.O_RDWR | os.O_NOCTTY)
  saved = termios.tcgetattr(handle)
  chars = [i == termios.VMIN for i in range(len(saved[6]))]
  rate = getattr(termios, f'B{rate}', saved[4])
  try:
    fcntl.flock(handle, fcntl.LOCK_EX)
    termios.tcsetattr(handle, termios.TCSAFLUSH, [0, 0,
      termios.CLOCAL | termios.CREAD | termios.CS8, 0, rate, rate, chars])
    yield open(handle, 'r+b', buffering = 0, closefd = False)
  finally:
    termios.tcsetattr(handle, termios.TCSAFLUSH, saved)
    os.close(handle)

def remove(config, bank, slot):
  bank, slot = map(int, (bank, slot))
  if 1 <= bank <= 4 and 1 <= slot <= 4:
    offset = 132 * bank + 32 * slot - 140
    return struct.pack_into('2x6B24x', config, offset, 0, 6, 0, 127, 0, 1)
  raise ValueError

def replace(config, bank, slot, enable, kind, control, low, high, *values):
  bank, slot, enable, kind = map(int, (bank, slot, enable, kind))
  if 1 <= bank <= 4 and 1 <= slot <= 4 and enable in [0, 1]:
    control, low, high = map(int, (control, low, high))
    if -1 <= control <= 127 and 0 <= low <= high <= 127:
      offset = 132 * bank + 32 * slot - 140
      return struct.pack_into('<2x6B6I', config, offset, enable, kind,
        low, high, max(0, control), control >= 0, *map(encode, values),
        *[0x40000000] * (6 - len(values)))
  raise ValueError

def show(config):
  print('hub', f'{config[15]}.{config[14]}')
  if config[16] == config[17] == 0:
    print('ring disconnected')
  else:
    print('ring', f'{config[17]}.{config[16]}')
  print('bank', f'{config[18] + 1}')

  for bank in [1, 2, 3, 4]:
    sys.stdout.write('\n')
    print(bank, 'channel', config[132 * bank - 110])
    for slot in [1, 2, 3, 4]:
      gesture = struct.unpack_from('<2x6B6I', config,
        132 * bank + 32 * slot - 140)
      if gesture[1] != 6:
        print(bank, slot, gesture[0], end = ' ')
        if gesture[1] == 0:
          print('vibrato', *map(decode, gesture[6:8]))
        elif gesture[1] == 1:
          print('bend', *map(decode, gesture[6:10]))
        elif gesture[1] == 2:
          print('tilt', gesture[4] if gesture[5] else -1, *gesture[2:4],
            *map(decode, gesture[6:8]))
        elif gesture[1] == 3:
          print('roll', gesture[4] if gesture[5] else -1, *gesture[2:4],
            *map(decode, gesture[6:8]))
        else:
          print('unknown')

def usage():
  sys.stderr.write(f'''\
Usage:
  {sys.argv[0]} DEVICE [show]
  {sys.argv[0]} DEVICE bank BANK
  {sys.argv[0]} DEVICE BANK channel CHANNEL
  {sys.argv[0]} DEVICE BANK SLOT ENABLE vibrato GAIN THRESHOLD
  {sys.argv[0]} DEVICE BANK SLOT ENABLE bend LMIN LMAX RMIN RMAX
  {sys.argv[0]} DEVICE BANK SLOT ENABLE tilt CONTROL LOW HIGH MIN MAX
  {sys.argv[0]} DEVICE BANK SLOT ENABLE roll CONTROL LOW HIGH MIN MAX
  {sys.argv[0]} DEVICE BANK SLOT remove
  {sys.argv[0]} DEVICE store

Arguments:
  BANK: gesture bank (1-4)
  CHANNEL: output MIDI channel (1-16)
  CONTROL: controller number (0-127) or -1 for pitch bend
  DEVICE: serial device path, e.g. /dev/ttyACM0
  ENABLE: 0 or 1 to disable or enable the gesture
  LOW, HIGH: lowest and highest controller values (0-127)
  Other values are percentages or degrees from -100.0 to 100.0
''')
  sys.exit(64)

def die(error):
  if hasattr(error, 'filename'):
    print(error.filename, end = ': ', file = sys.stderr)
  if isinstance(error, termios.error):
    print(error.args[1], file = sys.stderr)
  else:
    print(getattr(error, 'strerror', str(error)), file = sys.stderr)
  sys.exit(1)

sys.excepthook = lambda type, error, trace: die(error)

if len(sys.argv) < 2:
  usage()

with serial(sys.argv[1]) as device:
  device.write(b'jeannine\x01\x00\x00\x00')
  config = get(device, b'jeannine\x03\x00\x00\x00', 548)

  if len(sys.argv) == 2 or sys.argv[2:] == ['show']:
    show(config)
  elif len(sys.argv) == 3 and sys.argv[2] == 'store':
    device.write(b'jeannine\x04\x00\x00\x00')
  else:
    try:
      if len(sys.argv) == 4 and sys.argv[2] == 'bank':
        if not 1 <= int(sys.argv[3]) <= 4:
          raise ValueError
        config[18] = int(sys.argv[3]) - 1
      elif not 1 <= int(sys.argv[2]) <= 4:
        raise ValueError
      elif len(sys.argv) == 5 and sys.argv[3] == 'channel':
        if not 1 <= int(sys.argv[4]) <= 16:
          raise ValueError
        config[132 * int(sys.argv[2]) - 110] = int(sys.argv[4])
      elif len(sys.argv) == 5 and sys.argv[4] == 'remove':
        remove(config, sys.argv[2], sys.argv[3])
      elif len(sys.argv) == 8 and sys.argv[5] == 'vibrato':
        replace(config, *sys.argv[2:5], 0, -1, 0, 127, *sys.argv[6:8])
      elif len(sys.argv) == 10 and sys.argv[5] == 'bend':
        replace(config, *sys.argv[2:5], 1, -1, 0, 127, *sys.argv[6:10])
      elif len(sys.argv) == 11 and sys.argv[5] == 'tilt':
        replace(config, *sys.argv[2:5], 2, *sys.argv[6:11])
      elif len(sys.argv) == 11 and sys.argv[5] == 'roll':
        replace(config, *sys.argv[2:5], 3, *sys.argv[6:11])
      else:
        usage()
    except ValueError:
      usage()
    device.write(config)
